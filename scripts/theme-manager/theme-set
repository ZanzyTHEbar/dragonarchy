#!/bin/bash
# theme-set: Set a theme, specified by its name.
# Usage: theme-set <theme-name>

if [[ -z "$1" ]]; then
  echo "Usage: theme-set <theme-name>" >&2
  exit 1
fi

THEMES_DIR="$(dirname "$0")/../../packages/themes/.config/themes"
CURRENT_THEME_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/current/theme"

THEME_NAME="$1"
THEME_PATH="$THEMES_DIR/$THEME_NAME"

# Check if the theme entered exists
if [[ ! -d "$THEME_PATH" ]]; then
  echo "Theme '$THEME_NAME' does not exist in $THEMES_DIR" >&2
  exit 2
fi

# Update theme symlink
mkdir -p "$(dirname "$CURRENT_THEME_DIR")"
ln -Tnsf "$THEME_PATH" "$CURRENT_THEME_DIR"

# "Compile" the dynamic theme colors into a static file for Hyprland to source
[ -f "$THEME_PATH/hyprland-palette.conf" ] && cp "$THEME_PATH/hyprland-palette.conf" ~/.config/hypr/colors-theme.conf || true

# Change GNOME modes (best-effort; skip if gsettings or DBus not available)
if command -v gsettings >/dev/null 2>&1; then
  if [[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/current/theme/light.mode" ]]; then
    timeout 2s gsettings set org.gnome.desktop.interface color-scheme "prefer-light" >/dev/null 2>&1 || true
    timeout 2s gsettings set org.gnome.desktop.interface gtk-theme "Adwaita" >/dev/null 2>&1 || true
  else
    timeout 2s gsettings set org.gnome.desktop.interface color-scheme "prefer-dark" >/dev/null 2>&1 || true
    timeout 2s gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark" >/dev/null 2>&1 || true
  fi
fi

# Set btop theme
mkdir -p ~/.config/btop/themes
ln -snf ~/.config/current/theme/btop.theme ~/.config/btop/themes/current.theme

# Set walker theme (Walker expects themes/current/style.css and optional layout.toml)
mkdir -p ~/.config/walker/themes/current
ln -snf ~/.config/current/theme/walker.css ~/.config/walker/themes/current/style.css
if [ -f ~/.config/current/theme/walker.toml ]; then
  ln -snf ~/.config/current/theme/walker.toml ~/.config/walker/themes/current/layout.toml
else
  [ -f ~/.config/walker/themes/default.toml ] && ln -snf ~/.config/walker/themes/default.toml ~/.config/walker/themes/current/layout.toml || true
fi

# Set GTK theme for Nemo
mkdir -p ~/.config/gtk-3.0
ln -snf ~/.config/current/theme/gtk.css ~/.config/gtk-3.0/gtk.css

# Generate kitty theme from palettes and link current
"$(dirname "$0")/generate-kitty-themes" >/dev/null 2>&1 || true
mkdir -p "$HOME/.config/kitty"
ln -snf "$CURRENT_THEME_DIR/kitty.conf" "$HOME/.config/kitty/colors.conf"

# Ensure kitty includes colors.conf exactly once
mkdir -p "$HOME/.config/kitty"
touch "$HOME/.config/kitty/kitty.conf"
if grep -Eq '^[[:space:]]*include[[:space:]]+colors\.conf([[:space:]]|$)' "$HOME/.config/kitty/kitty.conf"; then
  # De-duplicate existing include lines (keep the first one)
  tmpkitty=$(mktemp)
  awk 'BEGIN{found=0} { if ($0 ~ /^[ \t]*include[ \t]+colors\.conf([ \t]|$)/) { if (!found) { print; found=1 } } else { print } }' "$HOME/.config/kitty/kitty.conf" >"$tmpkitty" && mv "$tmpkitty" "$HOME/.config/kitty/kitty.conf"
else
  # Prepend include at the top
  tmpkitty=$(mktemp)
  {
    echo "include colors.conf"
    cat "$HOME/.config/kitty/kitty.conf"
  } >"$tmpkitty" && mv "$tmpkitty" "$HOME/.config/kitty/kitty.conf"
fi

# Trigger kitty reload (send SIGUSR1 to all kitty instances)
pkill -USR1 -x kitty || true

# Restart components to apply new theme (best-effort)
pkill -SIGUSR2 btop 2>/dev/null || true
pkill -SIGUSR2 waybar 2>/dev/null || true
# pkill swayosd-server
# setsid uwsm app -- swayosd-server &>/dev/null &
# makoctl reload
command -v hyprctl >/dev/null 2>&1 && hyprctl reload >/dev/null 2>&1 || true
command -v swaync-client >/dev/null 2>&1 && pgrep -x swaync >/dev/null 2>&1 && swaync-client -R >/dev/null 2>&1 || true
if pgrep -x "nemo" >/dev/null 2>&1; then
  nemo -q
  setsid nemo &>/dev/null &
fi

# Set new background
"$(dirname "$0")/theme-bg-next"

# Link wlogout CSS for this theme if provided
if [[ -f "$CURRENT_THEME_DIR/wlogout.css" ]]; then
  mkdir -p "$HOME/.config/wlogout"
  ln -snf "$CURRENT_THEME_DIR/wlogout.css" "$HOME/.config/wlogout/wlogout.css"
fi

# Configure zsh autosuggestions to use theme accent
if [[ -f "$CURRENT_THEME_DIR/hyprland-palette.conf" ]]; then
  ACCENT_HEX=$(awk '$1=="$accent"{print $3}' "$CURRENT_THEME_DIR/hyprland-palette.conf" | sed -E 's/rgba\(([^)]*)\)/#\1/' | cut -c1-7)
  if [[ -n "$ACCENT_HEX" ]]; then
    mkdir -p "$HOME/.config/zsh"
    echo "export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=fg=$ACCENT_HEX" >"$HOME/.config/zsh/autosuggest-theme.zsh"
  fi
fi

# Best-effort: align SDDM theme family with current theme name if matching exists
SDDM_THEMES_DIR="$(dirname "$0")/../../packages/sddm/usr/share/sddm/themes"
if [[ -d "$SDDM_THEMES_DIR/$THEME_NAME" ]]; then
  echo "Found matching SDDM theme '$THEME_NAME'. Applying..."
  "$(dirname "$0")/sddm-set" "$THEME_NAME" || true
fi
